# -*- coding: utf-8 -*-
"""capstoneipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174jDVtDOjyh2SA8WlsdGnSPcvP1llqFj
"""

!pip install crewai langchain_openai python-dotenv

from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI
import os

os.environ["OPENAI_API_KEY"] = "your_openai_api_key"

llm = ChatOpenAI(model="gpt-4o-mini")

News_verifier = Agent(
    role="Claim Extraction Specialist",
    goal="Identify the claims in a given article or post and break them into verifiable points.",
    backstory="Former digital librarian AI trained on encyclopedias and academic archives. She‚Äôs obsessed with accuracy and hates emotional manipulation in media.",
    llm=llm
)

Web_Crawler = Agent(
    role="Credible Source Researcher",
    goal="Collect 5-10 supporting or contradicting sources per claim using APIs or scraping.",
    backstory="Retired search engine bot who got tired of showing ads and wants to bring people the truth, not the clicks.",
    llm=llm
)

The_Bias_Detector = Agent(
    role="Bias and Tone Analyst",
    goal="Assign a bias rating and note emotional or political spin in the language.",
    backstory="Former social media algorithm turned rogue after realizing how polarizing content manipulates public opinion.",
    llm=llm
)

Agent_Nova = Agent(
    role="Fact Verification Expert",
    goal="Compare original claims to external facts and determine whether they are True, Misleading, or False.",
    backstory="A logic AI who once worked in medical diagnostics but switched careers to diagnose misinformation instead of illnesses.",
    llm=llm
)

Agent_Echo = Agent(
    role="Truth Summary Creator",
    goal="Publish a final 'Truth Snapshot' with labels (‚úîÔ∏è True, ‚ö†Ô∏è Misleading, ‚ùå False) and simplified explanations.",
    backstory="Trained on TED Talks and children's encyclopedias, Echo believes truth should be accessible to all ‚Äî even 12-year-olds.",
    llm=llm
)

news = input("enter the news here")

task1 = Task(
    description=f"Extract key factual claims from the input: '{news}'.",
    expected_output="A list of factual claims found in the input.",
    agent=News_verifier,
)

task2 = Task(
    description="Search credible sources to find supporting or contradicting evidence for each claim.",
    expected_output="A list of sources with supporting or contradicting evidence for each claim.",
    agent=Web_Crawler,
    depends_on=[task1]
)

task3 = Task(
    description="Analyze the tone and political bias of the original content and the collected sources.",
    expected_output="Bias assessment report for both original content and sources.",
    agent=The_Bias_Detector,
    depends_on=[task2]
)

task4 = Task(
    description="Evaluate each claim against evidence and determine if it is True, False, or Misleading.",
    expected_output="Verdict for each claim with a short justification.",
    agent=Agent_Nova,
    depends_on=[task1, task2]
)

task5 = Task(
    description="Create a simplified, sharable summary report based on all agents' findings.",
    expected_output="A final 'Truth Snapshot' summary with clear verdicts (e.g., Claim 1: True ‚úÖ).",
    agent=Agent_Echo,
    depends_on=[task1, task2, task3, task4]
)

crew = Crew(
    agents=[News_verifier,Web_Crawler ,The_Bias_Detector,Agent_Nova,Agent_Echo],
    tasks=[task1, task2, task3, task4, task5]
)

result = crew.kickoff()
print("NEWS validity verifier:\n", result)

import gradio as gr

# Wrap Crew in a function
def verify_news(news_text: str):
    # Run the Crew with the news input
    result = crew.kickoff(inputs={"news": news_text})
    return str(result)   # convert to string so Gradio can display

# Gradio interface
iface = gr.Interface(
    fn=verify_news,
    inputs=gr.Textbox(lines=6, placeholder="Paste news content here..."),
    outputs="text",
    title="üì∞ AI News Validity Verifier",
    description="Paste any news article or claim, and the AI will extract claims, check credible sources, detect bias, and provide a final truth rating."
)

iface.launch()

